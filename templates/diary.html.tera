{% extends "base.html.tera" %}
{% block content %}

<iframe width="0" height="0" style="display: None;" name="dummyframe" id="dummyframe"></iframe>

<form class="w3-container w3-text-blue" id="form" action="/diary" method="post" targer="#dummyframe">
{# <form id="form" class="w3-container w3-text-blue"> #}
    <p>
        <input name="title" class="w3-input" type="text" autofocus placeholder="Title">
    </p>

    <p class="w3-row-padding">
        <div class="w3-half" style="padding-right: 40px;">
            <div class="w3-mobile w3-card">
                <textarea name="content" class="w3-padding w3-input" style="min-height: 400px; width: 100%;" id="inputfield" wrap="hard" onkeypress="changeText" placeholder="Content"></textarea>
            </div>
        </div>

        <div class="w3-half" style="padding-left: 40px;">
            <div class="w3-mobile w3-card">
                <div class="w3-padding" style="min-height: 400px; width: 100%" id="outputfield">
                    Pandoc output
                </div>
            </div>
        </div>
    </p>
    <p>
        <input type='checkbox' name='topic_sexy' checked>
        <input type='checkbox' name='topic_no_sexy' checked>
        {# <input type='checkbox' name='topic[not_fancy]' checked>
        <input type='checkbox' name='topic[hallo]' checked> #}
    </p>
    <p>
        <input style="margin-top: 24px;" onclick="send" value="Submit" class="w3-btn w3-blue"/>
    </p>
</form>

<script>
    function send() {
        console.log("hallo");
        const data = new FormData(form);
        console.log(data);

        const out = {};
        out["topics"] = [];

        for (e of data.entries()) {
            if(e[0].startsWith("topic_") && e[1] ) {
                out["topics"].push(e[0].substr(6));
            }else{
                out[e[0]] = e[1];
            }
        }

        console.log(out);

        var request = new XMLHttpRequest();
        request.open('POST', '/diary');
        request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        request.send(JSON.stringify(out));
    }

    const form = document.getElementById("form");
    form.addEventListener("click", send);

    {% if port %}
        const PORT = {{port}};
    {% else %}
        const PORT = 3012;
    {% endif %}

    const input = document.getElementById("inputfield");
    const output = document.getElementById("outputfield");
    var buzzy = false;

    input.addEventListener("input", changeText);
    input.addEventListener("propertychange", changeText);

    function changeText() {
        const s = input.value;
        input.rows = s.split("\n").length;
        if(!buzzy) {
            buzzy = true;
            connection.send(s);
        }
    }

    window.WebSocket = window.WebSocket || window.MozWebSocket;

    var connection = new WebSocket('ws://'+window.location.hostname+":"+PORT);

    connection.onopen = function () {
        console.log("connection is open");
    };

    connection.onerror = function (error) {
        // an error occurred when sending/receiving data
        console.log("errored");
        console.log(error);
    };

    connection.onmessage = function (message) {
        output.innerHTML = message.data;
        buzzy = false;
    };

</script>

{% endblock content %}
