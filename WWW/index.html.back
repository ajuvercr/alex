<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./style.css">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="filereader.js"></script>
    <script src="jquery-3.3.1.min.js"></script>
</head>
<body>

        <button onclick="openFile()">Open</button>
        <input id="file-input" type="file" name="name" style="display: none;" multiple/>

        <input id="folderName" type="text" placeholder="New folder"/>
        <button onclick="createFolder()">Create folder</button>
        <button onclick="goBack()">BACK</button>

        <p>
            You are in /<span id="state"></span>
        </p>

        <ul id="list">
            <li>Coffee</li>
            <li>Tea</li>
            <li>Milk</li>
        </ul>


        <p>
            Title
        </p>
        <input id="diaryTitle" type="text" placeholder="Title"/>
        <p>
            Content
        </p>
        <textarea id="diaryContent" rows="10" cols="50" placeholder="Content"></textarea>
        <button onclick="doDairy()">Send!</button>

        <p id="error"></p>

    <script>
        var fileButton, list, state, folderName, diaryTitle, diaryContent;
        var href = window.location.origin;

        function init() {
            fileButton = document.getElementById('file-input');
            list = document.getElementById("list");
            state = document.getElementById("state");

            diaryContent = document.getElementById("diaryContent");
            diaryTitle = document.getElementById("diaryTitle");

            folderName = document.getElementById("folderName");

            fileButton.addEventListener('change', printFiles);

            downloadFiles("");
        }

        function doDairy() {
            const data = {
                title: diaryTitle.value,
                content: diaryContent.value,
            }

            $.ajax({
                url: href+"/diary",
                type: "POST",
                data: JSON.stringify(data),
                contentType: "application/json",
                cache: false,
                processData:false,
                success: function(data) {
                    console.log(data);
                },
                error: function(e) {
                    console.log(e);
                }
            });
        }

        function openFile() {
            fileButton.click();
        }

        function printFiles() {

            for(let i = 0; i < fileButton.files.length; i++) {
                let file = fileButton.files[i];

                let folder = [href+"/upload", state.innerHTML].join("/") + "/";
                $.ajax({
                    url: folder+file.name,
                    type: "POST",
                    data: file,
                    contentType: false,
                    cache: false,
                    processData:false,
                    success: function(data) {
                        downloadFiles(state.innerHTML);
                    },
                    error: function(e) {
                        console.log(e);
                    }
                });
            }
        }

        function createFolder() {
            const middle = state.innerHTML ? state.innerHTML + "/" : "";
            let newState = "./upload/"+ middle + folderName.value;

            let map = {
                token: "Less secret",
                folder: {
                    children: [],
                    name: newState
                }
            };
            updateView(map);
        }

        function downloadFile(isFile) {
            downloadFiles(downloadButton.value);
        }

        function downloadFiles(fileName) {
            console.log("/upload/"+fileName);
            console.log("filename: "+fileName)
            console.log(href+"/upload/"+fileName);
            $.ajax({
                url: href+"/upload/"+fileName,
                type: "GET",
                contentType: "application/pdf",
                responseType: 'arraybuffer',
                success: function(data) {
                    download(data, fileName);
                },
                error: function(e) {
                    console.log(e);
                }
            });
        }

        function download(data, filename) {
            try {
                let map = JSON.parse(data);
                if (map.token == "My Super Secret Token") {
                    updateView(map);
                } else {
                    save(data, filename);
                }
            } catch(e) {
                save(data, filename);
            }
        }

        function updateView(map) {
            list.innerHTML = "";
            map.folder.children.forEach(c => {
                c = c.split("/").slice(2).join("/")
                list.innerHTML += '<li class=listItem>'+getFilename(c)+"</li>";
            });

            state.innerHTML = map.folder.name.split("/").slice(2).join("/");

            $(".listItem").click(listClick);
        }

        function getFilename(filename) {
            return filename.split("/").pop();
        }

        function listClick(e) {
            const middle = state.innerHTML ? state.innerHTML + "/" : "";
            downloadFiles(middle+ e.target.innerHTML);
        }

        function goBack() {
            let here = state.innerHTML.split("/");
            here.pop();
            downloadFiles(here.join("/"));   
        }

        // Function to download data to a file
        function save(data, filename) {
            var file = new Blob([data]);
            if (window.navigator.msSaveOrOpenBlob) // IE10+
                window.navigator.msSaveOrOpenBlob(file, filename);
            else { // Others
                var a = document.createElement("a"),
                        url = URL.createObjectURL(file);
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                setTimeout(function() {
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);  
                }, 0); 
            }
        }

        var baseLogFunction = console.log;
        console.log = function(){
            baseLogFunction.apply(console, arguments);

            var args = Array.prototype.slice.call(arguments);
            for(var i=0;i<args.length;i++){
                var node = createLogNode(args[i]);
                document.querySelector("#error").appendChild(node);
            }

        }

        function createLogNode(message){
            var node = document.createElement("div");
            var textNode = document.createTextNode(message);
            node.appendChild(textNode);
            return node;
        }

        window.onerror = function(message, url, linenumber) {
            console.log("JavaScript error: " + message + " on line " +
                linenumber + " for " + url);
        }


        $(init);
    </script>
</html>
</body>